// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: test.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HalerClient is the client API for Haler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HalerClient interface {
	HandleExit(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*Empty, error)
	StatusChan(ctx context.Context, opts ...grpc.CallOption) (Haler_StatusChanClient, error)
	ListenJobs(ctx context.Context, opts ...grpc.CallOption) (Haler_ListenJobsClient, error)
	SendResult(ctx context.Context, in *ResponseJobWrapper, opts ...grpc.CallOption) (*Empty, error)
}

type halerClient struct {
	cc grpc.ClientConnInterface
}

func NewHalerClient(cc grpc.ClientConnInterface) HalerClient {
	return &halerClient{cc}
}

func (c *halerClient) HandleExit(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protocol.Haler/HandleExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halerClient) StatusChan(ctx context.Context, opts ...grpc.CallOption) (Haler_StatusChanClient, error) {
	stream, err := c.cc.NewStream(ctx, &Haler_ServiceDesc.Streams[0], "/protocol.Haler/StatusChan", opts...)
	if err != nil {
		return nil, err
	}
	x := &halerStatusChanClient{stream}
	return x, nil
}

type Haler_StatusChanClient interface {
	Send(*Status) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type halerStatusChanClient struct {
	grpc.ClientStream
}

func (x *halerStatusChanClient) Send(m *Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *halerStatusChanClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *halerClient) ListenJobs(ctx context.Context, opts ...grpc.CallOption) (Haler_ListenJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Haler_ServiceDesc.Streams[1], "/protocol.Haler/ListenJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &halerListenJobsClient{stream}
	return x, nil
}

type Haler_ListenJobsClient interface {
	Send(*Empty) error
	Recv() (*RequestJobWrapper, error)
	grpc.ClientStream
}

type halerListenJobsClient struct {
	grpc.ClientStream
}

func (x *halerListenJobsClient) Send(m *Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *halerListenJobsClient) Recv() (*RequestJobWrapper, error) {
	m := new(RequestJobWrapper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *halerClient) SendResult(ctx context.Context, in *ResponseJobWrapper, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protocol.Haler/SendResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HalerServer is the server API for Haler service.
// All implementations must embed UnimplementedHalerServer
// for forward compatibility
type HalerServer interface {
	HandleExit(context.Context, *ExitRequest) (*Empty, error)
	StatusChan(Haler_StatusChanServer) error
	ListenJobs(Haler_ListenJobsServer) error
	SendResult(context.Context, *ResponseJobWrapper) (*Empty, error)
	mustEmbedUnimplementedHalerServer()
}

// UnimplementedHalerServer must be embedded to have forward compatible implementations.
type UnimplementedHalerServer struct {
}

func (UnimplementedHalerServer) HandleExit(context.Context, *ExitRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleExit not implemented")
}
func (UnimplementedHalerServer) StatusChan(Haler_StatusChanServer) error {
	return status.Errorf(codes.Unimplemented, "method StatusChan not implemented")
}
func (UnimplementedHalerServer) ListenJobs(Haler_ListenJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenJobs not implemented")
}
func (UnimplementedHalerServer) SendResult(context.Context, *ResponseJobWrapper) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResult not implemented")
}
func (UnimplementedHalerServer) mustEmbedUnimplementedHalerServer() {}

// UnsafeHalerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HalerServer will
// result in compilation errors.
type UnsafeHalerServer interface {
	mustEmbedUnimplementedHalerServer()
}

func RegisterHalerServer(s grpc.ServiceRegistrar, srv HalerServer) {
	s.RegisterService(&Haler_ServiceDesc, srv)
}

func _Haler_HandleExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalerServer).HandleExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Haler/HandleExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalerServer).HandleExit(ctx, req.(*ExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Haler_StatusChan_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HalerServer).StatusChan(&halerStatusChanServer{stream})
}

type Haler_StatusChanServer interface {
	SendAndClose(*Empty) error
	Recv() (*Status, error)
	grpc.ServerStream
}

type halerStatusChanServer struct {
	grpc.ServerStream
}

func (x *halerStatusChanServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *halerStatusChanServer) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Haler_ListenJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HalerServer).ListenJobs(&halerListenJobsServer{stream})
}

type Haler_ListenJobsServer interface {
	Send(*RequestJobWrapper) error
	Recv() (*Empty, error)
	grpc.ServerStream
}

type halerListenJobsServer struct {
	grpc.ServerStream
}

func (x *halerListenJobsServer) Send(m *RequestJobWrapper) error {
	return x.ServerStream.SendMsg(m)
}

func (x *halerListenJobsServer) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Haler_SendResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseJobWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalerServer).SendResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Haler/SendResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalerServer).SendResult(ctx, req.(*ResponseJobWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

// Haler_ServiceDesc is the grpc.ServiceDesc for Haler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Haler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Haler",
	HandlerType: (*HalerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleExit",
			Handler:    _Haler_HandleExit_Handler,
		},
		{
			MethodName: "SendResult",
			Handler:    _Haler_SendResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StatusChan",
			Handler:       _Haler_StatusChan_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListenJobs",
			Handler:       _Haler_ListenJobs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
